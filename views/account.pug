extends base 

//-mixin for repeated code
mixin navItem(link, text, icon, active)
  //-in case "active" is true, we add a class "side-nav--active"
  li(class= `${active ? 'side-nav--active' : ''}`)
    a(href= `${ link }`)
      svg
        use(xlink:href=`img/icons.svg#icon-${icon}`)
      | #{text}

block content
  main.main
    .user-view
      nav.user-view__menu
        ul.side-nav
          +navItem('#', 'Settings', 'settings', true)
          +navItem('/my-tours', 'My bookings', 'briefcase', false)
          +navItem('#', 'My reviews', 'star', false)
          +navItem('#', 'Billing', 'credit-card', false)
        
        //- admin settings will be visible only for role admins
        //- we pass user here from getAccount in viewController.js
        - if (user.role === 'admin')
          .admin-nav
            h5.admin-nav__heading Admin
            ul.side-nav
            +navItem('#', 'Manage tours', 'map')
            +navItem('#', 'Manage users', 'users')
            +navItem('#', 'Manage reviews', 'star')
            +navItem('#', 'Manage bookings', 'briefcase')

      .user-view__content
        .user-view__form-container
          h2.heading-secondary.ma-bt-md Your account settings
          
          //- Here in form element we add (action='/submit-user-data' method='POST'), 
          //- which is necessary for user update (variant: Specifying POST method in a 
          //-form along with url where it should be sent); '/submit-user-data' - endpoint where 
          //- data should be sent        
          //-form.form.form-user-data(action='/submit-user-data' method='POST' enctype='multipart/form-data')
        
          //-user update (API version)
          form.form.form-user-data
            .form__group
              label.form__label(for='name') Name
              
              //- user update (both variants: Specifying POST method in a 
              //-form along with url where it should be sent and API)), name='name' - value 
              //- will be sent based on its name attribute
              input#name.form__input(type='text', value=`${user.name}`, required, name='name')
              
            .form__group.ma-bt-md
              label.form__label(for='email') Email address
              
              //- user update (both variants: Specifying POST method in a 
              //-form along with url where it should be sent and API)), name='name' - value 
              //- will be sent based on its name attribute
              input#email.form__input(type='email', value=`${user.email}`, required, name='email')

            .form__group.form__photo-upload
              img.form__user-photo(src=`img/users/${user.photo}`, alt='User photo')
              
              //- 'image/*' is from file.mimetype; ('photo') - name of the field in a form
              input.form__upload(type='file', accept='image/*', id='photo', name='photo')
              
              //- when we click on label, it activates the element with id 'photo'
              label(for='photo') Choose new photo
            .form__group.right
              button.btn.btn--small.btn--green Save settings
        .line &nbsp;
        .user-view__form-container
          h2.heading-secondary.ma-bt-md Password change
          form.form.form-user-settings
            .form__group
              label.form__label(for='password-current') Current password
              input#password-current.form__input(type='password', placeholder='••••••••', required, minlength='8')
            .form__group
              label.form__label(for='password') New password
              input#password.form__input(type='password', placeholder='••••••••', required, minlength='8')
            .form__group.ma-bt-lg
              label.form__label(for='password-confirm') Confirm password
              input#password-confirm.form__input(type='password', placeholder='••••••••', required, minlength='8')
            .form__group.right
              button.btn.btn--small.btn--green.btn--save-password Save password
